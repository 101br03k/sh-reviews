<!DOCTYPE html>
<html>
<head>
  <title>Edit Review</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="icon" type="image/x-icon" href="/images/logos/icon.png">
  <link rel="apple-touch-icon" href="/images/logos/icon.png">
</head>
<body>
  <div class="container">
    <div>
      <button id="editTab" class="tab active">Edit</button>
      <button id="previewTab" class="tab">Preview</button>
    </div>
    <div id="previewSection" style="display:none;"></div>
    <div id="editorSection">
      <h1>Edit Review</h1>
      <form action="/update/<%= review.id %>" method="POST" enctype="multipart/form-data">
        <input type="text" name="title" value="<%= review.title %>" required>
        <textarea name="review" required><%= review.review %></textarea><br>
        Select Rating:
        <select name="rating" required>
          <option value="">Select Rating</option>
          <option value="1" <%= review.rating == 1 ? 'selected' : '' %>>1 Star</option>
          <option value="2" <%= review.rating == 2 ? 'selected' : '' %>>2 Stars</option>
          <option value="3" <%= review.rating == 3 ? 'selected' : '' %>>3 Stars</option>
          <option value="4" <%= review.rating == 4 ? 'selected' : '' %>>4 Stars</option>
          <option value="5" <%= review.rating == 5 ? 'selected' : '' %>>5 Stars</option>
        </select><br><br>
        <label for="tags">Tags (comma separated):</label>
        <input type="text" id="tags" name="tags" value="<%= review.tags ? review.tags.join(',') : '' %>" placeholder="e.g. food,service,clean"><br><br>
          <% if (review.images && review.images.length > 0) { %>
            <div>
              <strong>Current Images:</strong><br>
              <% review.images.forEach(img => { %>
                <label style="display:inline-block; margin-right:1em;">
                  <img src="<%= img.image %>" alt="Review Image" style="max-width:80px; max-height:80px; display:block;">
                  <input type="checkbox" name="keepImages" value="<%= img.image %>" checked> Keep
                </label>
              <% }) %>
            </div>
          <% } %>
        <input type="file" name="images" accept="image/*" multiple>
        <div class="edit-actions">
          <button type="submit">Update Review</button>
          <a href="/" class="button">Cancel Edit</a>
          <button class="delete" type="submit" form="delete-form" onclick="return confirm('Are you sure you want to delete this review?');">Delete Review</button>
        </div>
      </form>
      <form id="delete-form" action="/delete/<%= review.id %>" method="POST"></form>
    </div>
  </div>
<script>
  const editTab = document.getElementById('editTab');
  const previewTab = document.getElementById('previewTab');
  const editorSection = document.getElementById('editorSection');
  const previewSection = document.getElementById('previewSection');
  const imageInput = document.querySelector('input[name="image"]');
  const currentImage = document.getElementById('current-image');

  editTab.onclick = () => {
    editTab.classList.add('active');
    previewTab.classList.remove('active');
    editorSection.style.display = '';
    previewSection.style.display = 'none';
  };

  previewTab.onclick = async () => {
    previewTab.classList.add('active');
    editTab.classList.remove('active');
    editorSection.style.display = 'none';
    previewSection.style.display = '';

    // Gather form data
    const title = document.querySelector('[name="title"]').value;
    const review = document.querySelector('[name="review"]').value;
    const rating = document.querySelector('[name="rating"]').value;

    // Gather all selected new images as base64
    const imagesInput = document.querySelector('input[name="images"]');
    let newImages = [];
    if (imagesInput && imagesInput.files && imagesInput.files.length > 0) {
      for (let i = 0; i < imagesInput.files.length; i++) {
        newImages.push(await new Promise(resolve => {
          const reader = new FileReader();
          reader.onload = e => resolve(e.target.result);
          reader.readAsDataURL(imagesInput.files[i]);
        }));
      }
    }

    // Gather checked existing images (those the user wants to keep)
    let existingImages = [];
    document.querySelectorAll('input[name="keepImages"]:checked').forEach(cb => {
      existingImages.push(cb.value);
    });

    // Combine both arrays
    const images = existingImages.concat(newImages);

    // Fetch preview HTML from server
    const res = await fetch('/preview', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({ title, review, rating, images })
    });
    previewSection.innerHTML = await res.text();
  };

  // Show selected image immediately in the editor
  imageInput.addEventListener('change', function() {
    if (imageInput.files && imageInput.files[0]) {
      const reader = new FileReader();
      reader.onload = function(e) {
        currentImage.src = e.target.result;
      };
      reader.readAsDataURL(imageInput.files[0]);
    }
  });
</script>
</body>
</html>